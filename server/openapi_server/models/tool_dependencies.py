# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.tool import Tool
from openapi_server import util

from openapi_server.models.tool import Tool  # noqa: E501

class ToolDependencies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tools=None):  # noqa: E501
        """ToolDependencies - a model defined in OpenAPI

        :param tools: The tools of this ToolDependencies.  # noqa: E501
        :type tools: List[Tool]
        """
        self.openapi_types = {
            'tools': List[Tool]
        }

        self.attribute_map = {
            'tools': 'tools'
        }

        self._tools = tools

    @classmethod
    def from_dict(cls, dikt) -> 'ToolDependencies':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ToolDependencies of this ToolDependencies.  # noqa: E501
        :rtype: ToolDependencies
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tools(self):
        """Gets the tools of this ToolDependencies.

        A list of tools  # noqa: E501

        :return: The tools of this ToolDependencies.
        :rtype: List[Tool]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this ToolDependencies.

        A list of tools  # noqa: E501

        :param tools: The tools of this ToolDependencies.
        :type tools: List[Tool]
        """
        if tools is None:
            raise ValueError("Invalid value for `tools`, must not be `None`")  # noqa: E501

        self._tools = tools
